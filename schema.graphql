scalar Timestamp

type Query {
  id: ID!
  commodities: [Commodity!]!
  commodity(id: ID!): Commodity
  rootAccount: Account!
  accounts: [Account!]!
  account(id: ID!): Account
  transactions: [Transaction!]!
  transaction(id: ID!): Transaction
}

interface Node {
  id: ID!
}

type Commodity implements Node {
  id: ID!
  book: Book!
  space: String!
}

type Account implements Node {
  id: ID!
  book: Book!
  name: String!
  type: AccountType!
  parent: Account
  children: [Account!]!
  commodity: Commodity!
  commodityScu: Int!
  transactions: [Transaction!]!
}

enum AccountType {
  ROOT
  BANK
  EQUITY
  CASH
  ASSET
  LIABILITY
  RECEIVABLE
  INCOME
  EXPENSE
}

type Transaction implements Node {
  id: ID!
  book: Book!
  currency: Commodity!
  postedAt: Timestamp!
  enteredAt: Timestamp!
  description: String!
  splits: [Split!]!
}

type SplitValue {
  nom: Int!
  denom: Int!
}

type Split implements Node {
  id: ID!
  account: Account!
  value: SplitValue!
  quantity: SplitValue!
}
